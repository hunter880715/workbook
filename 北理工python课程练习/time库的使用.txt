time库的使用：time库是Python中处理时间的标准库。
用于计算机时间的表达
提供获取系统时间并格式化输出功能
停工系统级精确计时功能，用于程序性能分析

 包括三类函数
时间获取：
 time() 获取当前时间戳，即计算机内部的时间值，返回浮点数。 # 例：time.time() 结果：1516939876.6022282

 ctime() 获取当前时间并以易读方式表示，返回字符串。
# 例：time.time() 结果：'Fri Jan 26 12:11:16 2018'
 
gmtime() 获取当前时间，表示为计算机可处理的时间格式。 
# 例：time.gmtime() 结果：time.struct_time(tm_year=2018, tm_mon=1, tm_mday=26, tm_hour=4, tm_min=11, tm_sec=16, tm_wday=4, tm_yday=26, tm_isdst=0)

时间格式化：将时间以合理的方式展示出来
格式化：类似字符串的格式化，需要有展示模板。
展示模板由特定的格式化控制符组成

strftime(tpl, ts) 实现时间格式化的方法,tpl是格式化模板字符串，用来定义输出效果，ts是计算机内部事件类型变量
 # 例：t = time.gmtime() 
       time.strftime("%Y-%m-%d %H:%M:%S",t) 
      结果：‘2018-01-26 12:55:20’

格式化字符串    日期/时间说明          值范围和实例
    %Y               年份           0000~9999，例：1900
    %m               月份           01~12，例：10
    %B              月份名称    January~December,例：April
    %b            月份名称缩写     Jan~Dec，例：Apr
    %d               日期          01~31，例：25
    %A               星期    Monday~Sunday，例：Wednesday
    %a              星期缩写    Mon~Sun，例：Wed
    %H           小时（24h制）      00~23，例：12
    %I           小时（12h制）      01~12，例：7
    %p              上/下午         AM,PM,例：PM
    %M               分钟           00~59，例：26
    %S                秒            00~59，例：42

strptime(str,tpl) 讲一段字符串变成时间的方法，str值得是字符串形式的时间值，tpl 是格式化模板字符串，用来定义输入效果。
# 例：timeStr = ‘2018-01-26 12:55:20’
      time.strptime(timeStr, "%Y-%m-%d %H:%M:%S")
结果：time.srtuct_time(tm_year=2018, tm_mon=1,
      tm_mday=26, tm_hour=4, tm_min=11, tm_sec=16,
      tm_wday=4, tm_yday=26, tm_isdst=0)

程序计时：程序计时指测量起止动作所经历时间的过程


sleep(s) 产生时间；s拟程序休眠/停顿的时间，单位是秒，可以使用浮点数。
例：def wait():
        time.sleep(3.3)
wait() # 结果是程序将等待3.3秒后再退出。

perf_counter() 测量时间；返回一个CPU级别的精准时间计数值，单位为秒；由于这个计数值七点不确定，连续调用的差值才有意义。
# 例：start = time.perf_counter()
结果：318.66599499718114
end = time.perf_counter()
结果：341.3905185375658
end - start
结果：22.724523540384666